{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nconst _c0 = [\"mdbScrollspy\", \"\"];\nconst _c1 = [\"*\"];\nclass MdbScrollspyLinkDirective {\n  constructor(cdRef, document) {\n    this.cdRef = cdRef;\n    this.document = document;\n    this._scrollIntoView = true;\n    this.scrollspyLink = true;\n    this.active = false;\n  }\n  get scrollIntoView() {\n    return this._scrollIntoView;\n  }\n  set scrollIntoView(value) {\n    this._scrollIntoView = value;\n  }\n  get section() {\n    return this._section;\n  }\n  set section(value) {\n    if (value) {\n      this._section = value;\n    }\n  }\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  onClick() {\n    if (this.section && this.scrollIntoView === true) {\n      this.section.scrollIntoView();\n    }\n  }\n  detectChanges() {\n    this.cdRef.detectChanges();\n  }\n  assignSectionToId() {\n    this.section = this.document.documentElement.querySelector(`#${this.id}`);\n  }\n  ngOnInit() {\n    this.assignSectionToId();\n  }\n}\nMdbScrollspyLinkDirective.ɵfac = function MdbScrollspyLinkDirective_Factory(t) {\n  return new (t || MdbScrollspyLinkDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n};\nMdbScrollspyLinkDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyLinkDirective,\n  selectors: [[\"\", \"mdbScrollspyLink\", \"\"]],\n  hostVars: 4,\n  hostBindings: function MdbScrollspyLinkDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MdbScrollspyLinkDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"scrollspy-link\", ctx.scrollspyLink)(\"active\", ctx.active);\n    }\n  },\n  inputs: {\n    scrollIntoView: \"scrollIntoView\",\n    id: [\"mdbScrollspyLink\", \"id\"]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyLinkDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyLink]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    scrollIntoView: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspyLink']\n    }],\n    scrollspyLink: [{\n      type: HostBinding,\n      args: ['class.scrollspy-link']\n    }],\n    active: [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', []]\n    }]\n  });\n})();\nclass MdbScrollspyService {\n  constructor() {\n    this.scrollSpys = [];\n    this.activeSubject = new Subject();\n    this.active$ = this.activeSubject;\n  }\n  addScrollspy(scrollSpy) {\n    this.scrollSpys.push(scrollSpy);\n  }\n  removeScrollspy(scrollSpyId) {\n    const scrollSpyIndex = this.scrollSpys.findIndex(spy => {\n      return spy.id === scrollSpyId;\n    });\n    this.scrollSpys.splice(scrollSpyIndex, 1);\n  }\n  updateActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    this.setActiveLink(activeLink);\n  }\n  removeActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    if (!activeLink) {\n      return;\n    }\n    activeLink.active = false;\n    activeLink.detectChanges();\n  }\n  setActiveLink(activeLink) {\n    if (activeLink) {\n      activeLink.active = true;\n      activeLink.detectChanges();\n      this.activeSubject.next(activeLink);\n    }\n  }\n  removeActiveLinks(scrollSpyId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    scrollSpy.links.forEach(link => {\n      link.active = false;\n      link.detectChanges();\n    });\n  }\n}\nMdbScrollspyService.ɵfac = function MdbScrollspyService_Factory(t) {\n  return new (t || MdbScrollspyService)();\n};\nMdbScrollspyService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MdbScrollspyService,\n  factory: MdbScrollspyService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n  constructor(scrollSpyService, _elementRef, _renderer) {\n    this.scrollSpyService = scrollSpyService;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._destroy$ = new Subject();\n    this._collapsible = false;\n    this.activeLinkChange = new EventEmitter();\n    this.collapsibleElementHeight = 0;\n  }\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  get collapsible() {\n    return this._collapsible;\n  }\n  set collapsible(value) {\n    this._collapsible = coerceBooleanProperty(value);\n  }\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  ngOnInit() {\n    this.collapsibleElementHeight = this.host.getBoundingClientRect().height;\n    this.activeSub = this.scrollSpyService.active$.pipe(takeUntil(this._destroy$), distinctUntilChanged()).subscribe(activeLink => {\n      this.activeLinkChange.emit(activeLink);\n      if (this.collapsible) {\n        this.styleCollapsibleElement();\n      }\n    });\n  }\n  ngAfterContentInit() {\n    this.scrollSpyService.addScrollspy({\n      id: this.id,\n      links: this.links\n    });\n  }\n  ngOnDestroy() {\n    this.scrollSpyService.removeScrollspy(this.id);\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n  styleCollapsibleElement() {\n    this._renderer.setStyle(this.host, 'overflow', 'hidden');\n    this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');\n    this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');\n    const hostSiblings = this.getAllSiblings(this.host);\n    const isAnySiblingActive = hostSiblings.some(element => {\n      return element.classList.contains('active');\n    });\n    if (this.collapsible && isAnySiblingActive) {\n      this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);\n    } else if (this.collapsible && !isAnySiblingActive) {\n      this._renderer.setStyle(this.host, 'height', '0px');\n    }\n  }\n  getAllSiblings(element) {\n    let siblings = [];\n    if (!element.parentNode) {\n      return siblings;\n    }\n    let sibling = element.parentNode.firstElementChild;\n    do {\n      if (sibling != element) {\n        siblings.push(sibling);\n      }\n    } while (sibling = sibling.nextElementSibling);\n    return siblings;\n  }\n}\nMdbScrollspyDirective.ɵfac = function MdbScrollspyDirective_Factory(t) {\n  return new (t || MdbScrollspyDirective)(i0.ɵɵdirectiveInject(MdbScrollspyService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nMdbScrollspyDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MdbScrollspyDirective,\n  selectors: [[\"\", \"mdbScrollspy\", \"\"]],\n  contentQueries: function MdbScrollspyDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MdbScrollspyLinkDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n    }\n  },\n  inputs: {\n    id: [\"mdbScrollspy\", \"id\"],\n    collapsible: \"collapsible\"\n  },\n  outputs: {\n    activeLinkChange: \"activeLinkChange\"\n  },\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  template: function MdbScrollspyDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyDirective, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: '[mdbScrollspy]',\n      template: '<ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: MdbScrollspyService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    links: [{\n      type: ContentChildren,\n      args: [MdbScrollspyLinkDirective, {\n        descendants: true\n      }]\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspy']\n    }],\n    collapsible: [{\n      type: Input\n    }],\n    activeLinkChange: [{\n      type: Output\n    }]\n  });\n})();\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n  constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n    this._elementRef = _elementRef;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n    this.offset = 0;\n  }\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  isElementInViewport() {\n    const scrollTop = this.container.scrollTop;\n    const elTop = this.host.offsetTop - this.offset;\n    const elHeight = this.host.offsetHeight;\n    return scrollTop >= elTop && scrollTop < elTop + elHeight;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.removeActiveLinks(scrollSpyId);\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(this.container, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.host.id;\n    if (!this.container) {\n      this.container = this._getClosestEl(this.host, '.scrollspy-container');\n    }\n    this.renderer.setStyle(this.container, 'position', 'relative');\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n  _getClosestEl(el, selector) {\n    for (; el && el !== document; el = el.parentNode) {\n      if (el.matches && el.matches(selector)) {\n        return el;\n      }\n    }\n    return null;\n  }\n}\nMdbScrollspyElementDirective.ɵfac = function MdbScrollspyElementDirective_Factory(t) {\n  return new (t || MdbScrollspyElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n};\nMdbScrollspyElementDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyElementDirective,\n  selectors: [[\"\", \"mdbScrollspyElement\", \"\"]],\n  inputs: {\n    container: \"container\",\n    scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"],\n    offset: \"offset\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyElementDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyElement]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    container: [{\n      type: Input\n    }],\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyElement']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyWindowDirective {\n  constructor(document, el, renderer, ngZone, scrollSpyService) {\n    this.document = document;\n    this.el = el;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n    this.offset = 0;\n  }\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  isElementInViewport() {\n    const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n    const elHeight = this.el.nativeElement.offsetHeight;\n    const elTop = this.el.nativeElement.offsetTop - this.offset;\n    const elBottom = elTop + elHeight;\n    return scrollTop >= elTop && scrollTop <= elBottom;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    } else {\n      this.scrollSpyService.removeActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(window, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.el.nativeElement.id;\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n}\nMdbScrollspyWindowDirective.ɵfac = function MdbScrollspyWindowDirective_Factory(t) {\n  return new (t || MdbScrollspyWindowDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n};\nMdbScrollspyWindowDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyWindowDirective,\n  selectors: [[\"\", \"mdbScrollspyWindow\", \"\"]],\n  inputs: {\n    scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"],\n    offset: \"offset\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyWindowDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyWindow]'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyWindow']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyModule {}\nMdbScrollspyModule.ɵfac = function MdbScrollspyModule_Factory(t) {\n  return new (t || MdbScrollspyModule)();\n};\nMdbScrollspyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MdbScrollspyModule\n});\nMdbScrollspyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MdbScrollspyService]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      exports: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      providers: [MdbScrollspyService]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n//# sourceMappingURL=mdb-angular-ui-kit-scrollspy.mjs.map","map":{"version":3,"names":["i0","Directive","Inject","Input","HostBinding","HostListener","Injectable","EventEmitter","Component","ContentChildren","Output","NgModule","DOCUMENT","takeUntil","distinctUntilChanged","Subject","coerceBooleanProperty","MdbScrollspyLinkDirective","constructor","cdRef","document","_scrollIntoView","scrollspyLink","active","scrollIntoView","value","section","_section","id","_id","newId","onClick","detectChanges","assignSectionToId","documentElement","querySelector","ngOnInit","ɵfac","ChangeDetectorRef","ɵdir","type","args","selector","undefined","decorators","MdbScrollspyService","scrollSpys","activeSubject","active$","addScrollspy","scrollSpy","push","removeScrollspy","scrollSpyId","scrollSpyIndex","findIndex","spy","splice","updateActiveState","activeLinkId","find","activeLink","links","link","setActiveLink","removeActiveState","next","removeActiveLinks","forEach","ɵprov","MdbScrollspyDirective","scrollSpyService","_elementRef","_renderer","_destroy$","_collapsible","activeLinkChange","collapsibleElementHeight","collapsible","host","nativeElement","getBoundingClientRect","height","activeSub","pipe","subscribe","emit","styleCollapsibleElement","ngAfterContentInit","ngOnDestroy","complete","setStyle","hostSiblings","getAllSiblings","isAnySiblingActive","some","element","classList","contains","siblings","parentNode","sibling","firstElementChild","nextElementSibling","ElementRef","Renderer2","ɵcmp","template","descendants","MdbScrollspyElementDirective","renderer","ngZone","offset","_scrollSpyId","isElementInViewport","scrollTop","container","elTop","offsetTop","elHeight","offsetHeight","onScroll","listenToScroll","listen","_getClosestEl","runOutsideAngular","bind","ngAfterViewInit","setTimeout","el","matches","NgZone","MdbScrollspyWindowDirective","body","elBottom","window","MdbScrollspyModule","ɵmod","ɵinj","declarations","exports","providers"],"sources":["C:/Users/Alexis/MIS PROYECTOS/mdb5-free-angular/node_modules/mdb-angular-ui-kit/fesm2020/mdb-angular-ui-kit-scrollspy.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nclass MdbScrollspyLinkDirective {\n    constructor(cdRef, document) {\n        this.cdRef = cdRef;\n        this.document = document;\n        this._scrollIntoView = true;\n        this.scrollspyLink = true;\n        this.active = false;\n    }\n    get scrollIntoView() {\n        return this._scrollIntoView;\n    }\n    set scrollIntoView(value) {\n        this._scrollIntoView = value;\n    }\n    get section() {\n        return this._section;\n    }\n    set section(value) {\n        if (value) {\n            this._section = value;\n        }\n    }\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    onClick() {\n        if (this.section && this.scrollIntoView === true) {\n            this.section.scrollIntoView();\n        }\n    }\n    detectChanges() {\n        this.cdRef.detectChanges();\n    }\n    assignSectionToId() {\n        this.section = this.document.documentElement.querySelector(`#${this.id}`);\n    }\n    ngOnInit() {\n        this.assignSectionToId();\n    }\n}\nMdbScrollspyLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyLinkDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MdbScrollspyLinkDirective, selector: \"[mdbScrollspyLink]\", inputs: { scrollIntoView: \"scrollIntoView\", id: [\"mdbScrollspyLink\", \"id\"] }, host: { listeners: { \"click\": \"onClick()\" }, properties: { \"class.scrollspy-link\": \"this.scrollspyLink\", \"class.active\": \"this.active\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyLinkDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyLink]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { scrollIntoView: [{\n                type: Input\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspyLink']\n            }], scrollspyLink: [{\n                type: HostBinding,\n                args: ['class.scrollspy-link']\n            }], active: [{\n                type: HostBinding,\n                args: ['class.active']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', []]\n            }] } });\n\nclass MdbScrollspyService {\n    constructor() {\n        this.scrollSpys = [];\n        this.activeSubject = new Subject();\n        this.active$ = this.activeSubject;\n    }\n    addScrollspy(scrollSpy) {\n        this.scrollSpys.push(scrollSpy);\n    }\n    removeScrollspy(scrollSpyId) {\n        const scrollSpyIndex = this.scrollSpys.findIndex((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        this.scrollSpys.splice(scrollSpyIndex, 1);\n    }\n    updateActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        this.setActiveLink(activeLink);\n    }\n    removeActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        if (!activeLink) {\n            return;\n        }\n        activeLink.active = false;\n        activeLink.detectChanges();\n    }\n    setActiveLink(activeLink) {\n        if (activeLink) {\n            activeLink.active = true;\n            activeLink.detectChanges();\n            this.activeSubject.next(activeLink);\n        }\n    }\n    removeActiveLinks(scrollSpyId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        scrollSpy.links.forEach((link) => {\n            link.active = false;\n            link.detectChanges();\n        });\n    }\n}\nMdbScrollspyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMdbScrollspyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyService, decorators: [{\n            type: Injectable\n        }] });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n    constructor(scrollSpyService, _elementRef, _renderer) {\n        this.scrollSpyService = scrollSpyService;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._destroy$ = new Subject();\n        this._collapsible = false;\n        this.activeLinkChange = new EventEmitter();\n        this.collapsibleElementHeight = 0;\n    }\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    get collapsible() {\n        return this._collapsible;\n    }\n    set collapsible(value) {\n        this._collapsible = coerceBooleanProperty(value);\n    }\n    get host() {\n        return this._elementRef.nativeElement;\n    }\n    ngOnInit() {\n        this.collapsibleElementHeight = this.host.getBoundingClientRect().height;\n        this.activeSub = this.scrollSpyService.active$\n            .pipe(takeUntil(this._destroy$), distinctUntilChanged())\n            .subscribe((activeLink) => {\n            this.activeLinkChange.emit(activeLink);\n            if (this.collapsible) {\n                this.styleCollapsibleElement();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this.scrollSpyService.addScrollspy({ id: this.id, links: this.links });\n    }\n    ngOnDestroy() {\n        this.scrollSpyService.removeScrollspy(this.id);\n        this._destroy$.next();\n        this._destroy$.complete();\n    }\n    styleCollapsibleElement() {\n        this._renderer.setStyle(this.host, 'overflow', 'hidden');\n        this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');\n        this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');\n        const hostSiblings = this.getAllSiblings(this.host);\n        const isAnySiblingActive = hostSiblings.some((element) => {\n            return element.classList.contains('active');\n        });\n        if (this.collapsible && isAnySiblingActive) {\n            this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);\n        }\n        else if (this.collapsible && !isAnySiblingActive) {\n            this._renderer.setStyle(this.host, 'height', '0px');\n        }\n    }\n    getAllSiblings(element) {\n        let siblings = [];\n        if (!element.parentNode) {\n            return siblings;\n        }\n        let sibling = element.parentNode.firstElementChild;\n        do {\n            if (sibling != element) {\n                siblings.push(sibling);\n            }\n        } while ((sibling = sibling.nextElementSibling));\n        return siblings;\n    }\n}\nMdbScrollspyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyDirective, deps: [{ token: MdbScrollspyService }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nMdbScrollspyDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MdbScrollspyDirective, selector: \"[mdbScrollspy]\", inputs: { id: [\"mdbScrollspy\", \"id\"], collapsible: \"collapsible\" }, outputs: { activeLinkChange: \"activeLinkChange\" }, queries: [{ propertyName: \"links\", predicate: MdbScrollspyLinkDirective, descendants: true }], ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyDirective, decorators: [{\n            type: Component,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/component-selector\n                    selector: '[mdbScrollspy]',\n                    template: '<ng-content></ng-content>',\n                }]\n        }], ctorParameters: function () { return [{ type: MdbScrollspyService }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { links: [{\n                type: ContentChildren,\n                args: [MdbScrollspyLinkDirective, { descendants: true }]\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspy']\n            }], collapsible: [{\n                type: Input\n            }], activeLinkChange: [{\n                type: Output\n            }] } });\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n    constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n        this._elementRef = _elementRef;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n        this.offset = 0;\n    }\n    get host() {\n        return this._elementRef.nativeElement;\n    }\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    isElementInViewport() {\n        const scrollTop = this.container.scrollTop;\n        const elTop = this.host.offsetTop - this.offset;\n        const elHeight = this.host.offsetHeight;\n        return scrollTop >= elTop && scrollTop < elTop + elHeight;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.removeActiveLinks(scrollSpyId);\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(this.container, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.host.id;\n        if (!this.container) {\n            this.container = this._getClosestEl(this.host, '.scrollspy-container');\n        }\n        this.renderer.setStyle(this.container, 'position', 'relative');\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n    _getClosestEl(el, selector) {\n        for (; el && el !== document; el = el.parentNode) {\n            if (el.matches && el.matches(selector)) {\n                return el;\n            }\n        }\n        return null;\n    }\n}\nMdbScrollspyElementDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyElementDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyElementDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MdbScrollspyElementDirective, selector: \"[mdbScrollspyElement]\", inputs: { container: \"container\", scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyElementDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyElement]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }]; }, propDecorators: { container: [{\n                type: Input\n            }], scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyElement']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyWindowDirective {\n    constructor(document, el, renderer, ngZone, scrollSpyService) {\n        this.document = document;\n        this.el = el;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n        this.offset = 0;\n    }\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    isElementInViewport() {\n        const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n        const elHeight = this.el.nativeElement.offsetHeight;\n        const elTop = this.el.nativeElement.offsetTop - this.offset;\n        const elBottom = elTop + elHeight;\n        return scrollTop >= elTop && scrollTop <= elBottom;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n        else {\n            this.scrollSpyService.removeActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(window, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.el.nativeElement.id;\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n}\nMdbScrollspyWindowDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyWindowDirective, deps: [{ token: DOCUMENT }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyWindowDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MdbScrollspyWindowDirective, selector: \"[mdbScrollspyWindow]\", inputs: { scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyWindowDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyWindow]',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }]; }, propDecorators: { scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyWindow']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyModule {\n}\nMdbScrollspyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMdbScrollspyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyModule, declarations: [MdbScrollspyDirective,\n        MdbScrollspyLinkDirective,\n        MdbScrollspyElementDirective,\n        MdbScrollspyWindowDirective], exports: [MdbScrollspyDirective,\n        MdbScrollspyLinkDirective,\n        MdbScrollspyElementDirective,\n        MdbScrollspyWindowDirective] });\nMdbScrollspyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyModule, providers: [MdbScrollspyService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    exports: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    providers: [MdbScrollspyService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n//# sourceMappingURL=mdb-angular-ui-kit-scrollspy.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}